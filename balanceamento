// Classe que define um nó da árvore AVL
class AVLNode {
    int data, height;
    AVLNode left, right;

    public AVLNode(int data) {
        this.data = data;
        this.height = 1; // Altura inicial de um nó recém-criado
    }
}

// Classe que representa a árvore AVL
public class AVLTree {

    private AVLNode root;

    // Função para obter a altura de um nó
    private int height(AVLNode node) {
        return (node == null) ? 0 : node.height;
    }

    // Função para calcular o fator de balanceamento de um nó
    private int getBalance(AVLNode node) {
        return (node == null) ? 0 : height(node.left) - height(node.right);
    }

    // Atualiza a altura do nó
    private void updateHeight(AVLNode node) {
        node.height = Math.max(height(node.left), height(node.right)) + 1;
    }

    // Rotação simples à direita
    private AVLNode rotateRight(AVLNode y) {
        AVLNode x = y.left;
        AVLNode T2 = x.right;

        // Realiza a rotação
        x.right = y;
        y.left = T2;

        // Atualiza as alturas
        updateHeight(y);
        updateHeight(x);

        return x;
    }

    // Rotação simples à esquerda
    private AVLNode rotateLeft(AVLNode x) {
        AVLNode y = x.right;
        AVLNode T2 = y.left;

        // Realiza a rotação
        y.left = x;
        x.right = T2;

        // Atualiza as alturas
        updateHeight(x);
        updateHeight(y);

        return y;
    }

    // Método recursivo para inserção e balanceamento
    public AVLNode insert(AVLNode node, int data) {
        // 1. Realiza a inserção normal na árvore binária de busca
        if (node == null) {
            return new AVLNode(data);
        }
        if (data < node.data) {
            node.left = insert(node.left, data);
        } else if (data > node.data) {
            node.right = insert(node.right, data);
        } else {
            // Valores duplicados não são permitidos
            return node;
        }

        // 2. Atualiza a altura do nó ancestral
        updateHeight(node);

        // 3. Calcula o fator de balanceamento deste nó ancestral para verificar se ficou desbalanceado
        int balance = getBalance(node);

        // 4. Se o nó estiver desbalanceado, existem 4 casos

        // Caso Esquerda-Esquerda (LL)
        if (balance > 1 && data < node.left.data) {
            return rotateRight(node);
        }
        // Caso Direita-Direita (RR)
        if (balance < -1 && data > node.right.data) {
            return rotateLeft(node);
        }
        // Caso Esquerda-Direita (LR)
        if (balance > 1 && data > node.left.data) {
            node.left = rotateLeft(node.left);
            return rotateRight(node);
        }
        // Caso Direita-Esquerda (RL)
        if (balance < -1 && data < node.right.data) {
            node.right = rotateRight(node.right);
            return rotateLeft(node);
        }

        // Retorna o nó (inalterado) caso não haja necessidade de rotação
        return node;
    }

    // Método para inserir um novo dado na árvore AVL
    public void insert(int data) {
        root = insert(root, data);
    }

    // Método para realizar a travessia em ordem (para exibir a árvore)
    public void inOrder(AVLNode node) {
        if (node != null) {
            inOrder(node.left);
            System.out.print(node.data + " ");
            inOrder(node.right);
        }
    }

    public void inOrder() {
        inOrder(root);
        System.out.println();
    }

    // Método main para testar a árvore AVL
    public static void main(String[] args) {
        AVLTree tree = new AVLTree();

        /* Inserindo dados na árvore AVL */
        tree.insert(10);
        tree.insert(20);
        tree.insert(30);
        tree.insert(40);
        tree.insert(50);
        tree.insert(25);

        System.out.println("Travessia em ordem da Árvore AVL:");
        tree.inOrder();  // Deve exibir os elementos em ordem crescente
    }
}
